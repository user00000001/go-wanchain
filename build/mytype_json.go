// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package eeee

import (
	"encoding/json"
	"errors"
)

// MarshalYAML marshals as YAML.
func (f foo) MarshalYAML() (interface{}, error) {
	type foo struct {
		A string  `json:"aaa"`
		B string  `json:"bbb" gencodec:"required"`
		C string  `toml:"ccc" gencodec:"required"`
		D string  `yml:"ddd"`
		E string  `yml:"eee" gencodec:"required"`
		F *string `json:"fff" rlp:"nil"`
		I string  `json:"iii" rlp:"-"`
	}
	var enc foo
	enc.A = f.A
	enc.B = f.B
	enc.C = f.C
	enc.D = f.D
	enc.E = f.E
	enc.F = f.F
	enc.I = f.I
	return &enc, nil
}

// UnmarshalYAML unmarshals from YAML.
func (f *foo) UnmarshalYAML(unmarshal func(interface{}) error) error {
	type foo struct {
		A *string `json:"aaa"`
		B *string `json:"bbb" gencodec:"required"`
		C *string `toml:"ccc" gencodec:"required"`
		D *string `yml:"ddd"`
		E *string `yml:"eee" gencodec:"required"`
		F *string `json:"fff" rlp:"nil"`
		I *string `json:"iii" rlp:"-"`
	}
	var dec foo
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.A != nil {
		f.A = *dec.A
	}
	if dec.B == nil {
		return errors.New("missing required field 'b' for foo")
	}
	f.B = *dec.B
	if dec.C == nil {
		return errors.New("missing required field 'c' for foo")
	}
	f.C = *dec.C
	if dec.D != nil {
		f.D = *dec.D
	}
	if dec.E == nil {
		return errors.New("missing required field 'e' for foo")
	}
	f.E = *dec.E
	if dec.F != nil {
		f.F = dec.F
	}
	if dec.I != nil {
		f.I = *dec.I
	}
	return nil
}

// MarshalTOML marshals as TOML.
func (f foo) MarshalTOML() (interface{}, error) {
	type foo struct {
		A string  `json:"aaa"`
		B string  `json:"bbb" gencodec:"required"`
		C string  `toml:"ccc" gencodec:"required"`
		D string  `yml:"ddd"`
		E string  `yml:"eee" gencodec:"required"`
		F *string `json:"fff" rlp:"nil"`
		I string  `json:"iii" rlp:"-"`
	}
	var enc foo
	enc.A = f.A
	enc.B = f.B
	enc.C = f.C
	enc.D = f.D
	enc.E = f.E
	enc.F = f.F
	enc.I = f.I
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (f *foo) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type foo struct {
		A *string `json:"aaa"`
		B *string `json:"bbb" gencodec:"required"`
		C *string `toml:"ccc" gencodec:"required"`
		D *string `yml:"ddd"`
		E *string `yml:"eee" gencodec:"required"`
		F *string `json:"fff" rlp:"nil"`
		I *string `json:"iii" rlp:"-"`
	}
	var dec foo
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.A != nil {
		f.A = *dec.A
	}
	if dec.B == nil {
		return errors.New("missing required field 'b' for foo")
	}
	f.B = *dec.B
	if dec.C == nil {
		return errors.New("missing required field 'ccc' for foo")
	}
	f.C = *dec.C
	if dec.D != nil {
		f.D = *dec.D
	}
	if dec.E == nil {
		return errors.New("missing required field 'e' for foo")
	}
	f.E = *dec.E
	if dec.F != nil {
		f.F = dec.F
	}
	if dec.I != nil {
		f.I = *dec.I
	}
	return nil
}

// MarshalJSON marshals as JSON.
func (f foo) MarshalJSON() ([]byte, error) {
	type foo struct {
		A string  `json:"aaa"`
		B string  `json:"bbb" gencodec:"required"`
		C string  `toml:"ccc" gencodec:"required"`
		D string  `yml:"ddd"`
		E string  `yml:"eee" gencodec:"required"`
		F *string `json:"fff" rlp:"nil"`
		I string  `json:"iii" rlp:"-"`
	}
	var enc foo
	enc.A = f.A
	enc.B = f.B
	enc.C = f.C
	enc.D = f.D
	enc.E = f.E
	enc.F = f.F
	enc.I = f.I
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (f *foo) UnmarshalJSON(input []byte) error {
	type foo struct {
		A *string `json:"aaa"`
		B *string `json:"bbb" gencodec:"required"`
		C *string `toml:"ccc" gencodec:"required"`
		D *string `yml:"ddd"`
		E *string `yml:"eee" gencodec:"required"`
		F *string `json:"fff" rlp:"nil"`
		I *string `json:"iii" rlp:"-"`
	}
	var dec foo
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.A != nil {
		f.A = *dec.A
	}
	if dec.B == nil {
		return errors.New("missing required field 'bbb' for foo")
	}
	f.B = *dec.B
	if dec.C == nil {
		return errors.New("missing required field 'c' for foo")
	}
	f.C = *dec.C
	if dec.D != nil {
		f.D = *dec.D
	}
	if dec.E == nil {
		return errors.New("missing required field 'e' for foo")
	}
	f.E = *dec.E
	if dec.F != nil {
		f.F = dec.F
	}
	if dec.I != nil {
		f.I = *dec.I
	}
	return nil
}
